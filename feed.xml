<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The Programmer's Tool Belt</title>
    <link>http://akeffalas.github.io/blog</link>
    <atom:link href="http://akeffalas.github.io/blog/feed.xml" rel="self" type="application/rss+xml" />
    <description>Programming wisdom for your knowledge tool belt.</description>
    <language>en-gb</language>
    <pubDate>Sun, 15 Jun 2014 20:54:41 -0400</pubDate>
    <lastBuildDate>Sun, 15 Jun 2014 20:54:41 -0400</lastBuildDate>

    <item>
      <title>Guava Goodies: Lightweight Design by Contract with Preconditions</title>
      <link>http://akeffalas.github.io/blog/2014/06/guava-goodies-dbc-preconditions.html</link>
      <pubDate>Sun, 15 Jun 2014 00:00:00 -0400</pubDate>
      <guid isPermaLink="false">/2014/06/guava-goodies-dbc-preconditions.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;One of the more commonly used approaches for software API design is Bertrand Meyer&amp;#8217;s &lt;a href=&quot;http://en.wikipedia.org/wiki/Design_by_contract&quot;&gt;Design by Contract&lt;/a&gt;.  While it can be a very powerful technique, DbC can also be cumbersome (and overly strict) since to do it &quot;correctly&quot; a method&amp;#8217;s contract must define its: preconditions, postconditions, invariants, and side effects.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;My preference is to utilize a lightweight form of DbC in which a method contract only stipulates the required preconditions and the expected outcome (side effects) of the method&amp;#8217;s successful execution. The contract can be expressed with the method&amp;#8217;s description and parameter documentation via javadoc.  How do you enforce the contract&amp;#8217;s precondition constraints to allow for early failure during method invocation?&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Guava has you covered with its &lt;strong&gt;Preconditions&lt;/strong&gt; &lt;a href=&quot;https://code.google.com/p/guava-libraries/wiki/PreconditionsExplained&quot;&gt;utility&lt;/a&gt;.  Let&amp;#8217;s take a look at why a pure Java precondition verification implementation is truly dreadful.&lt;/p&gt;
&lt;/div&gt;
&lt;!--continue--&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_precondition_verification_with_java&quot;&gt;Precondition Verification with Java&lt;/h3&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;School.java&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums java language-java&quot;&gt;&lt;code&gt;package guava.demo.preconditions;

import java.util.List;

public class School {
    private final String name;
    private final List&amp;lt;String&amp;gt; departments;

    /**
     * @param name The school name, not null or empty
     * @param departments The list of departments at the school, not null or empty
     */
    public School(final String name, final List&amp;lt;String&amp;gt; departments) {
        if( name == null ) {
            throw new NullPointerException(&quot;Invalid name provided&quot;);
        }

        if( name.isEmpty() ) {
            throw new IllegalArgumentException(&quot;The provided name cannot be empty&quot;);
        }

        if( departments == null ) {
            throw new NullPointerException(&quot;Invalid department list provided&quot;);
        }

        if( departments.isEmpty() ) {
            throw new IllegalArgumentException(&quot;The provided department list cannot be empty&quot;);
        }

        this.name = name;
        this.departments = departments;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While this implementation is valid it could certainly use some help.  Just imagine how much uglier this constructor will become as more construction parameters are added or if additional constraints need to be placed on the existing parameters.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_preconditions_to_the_rescue&quot;&gt;Preconditions to the Rescue&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Guava&amp;#8217;s &lt;strong&gt;Preconditions&lt;/strong&gt; offers the help we need here since its &lt;a href=&quot;http://docs.guava-libraries.googlecode.com/git-history/release/javadoc/com/google/common/base/Preconditions.html&quot;&gt;API&lt;/a&gt; provides sanity checks for a number of the common exceptional inputs that a client caller can provide.  When the precondition is not met an &lt;strong&gt;Exception&lt;/strong&gt; is thrown with an optional, printf-style message.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here are the methods that I tend to use the most along with the exception it throws:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;checkArgument(boolean)&lt;/code&gt; throws &lt;strong&gt;IllegalArgumentException&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;checkNotNull(T)&lt;/code&gt; throws &lt;strong&gt;NullPointerException&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;checkState(boolean)&lt;/code&gt; throws &lt;strong&gt;IllegalStateException&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Given this rather intuitive API you should be able to see how we can clean up our &lt;strong&gt;School&lt;/strong&gt; implementation.  Let&amp;#8217;s try it again, this time we&amp;#8217;ll utilize &lt;strong&gt;Preconditions&lt;/strong&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums java language-java&quot;&gt;&lt;code&gt;package guava.demo.preconditions;

import java.util.List;

import static com.google.common.base.Preconditions.checkNotNull; &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
import static com.google.common.base.Preconditions.checkArgument;

public class School {
    private final String name;
    private final List&amp;lt;String&amp;gt; departments;

    /**
     * @param name The school name, not null or empty
     * @param departments The list of departments at the school, not null or empty
     */
    public School(final String name, final List&amp;lt;String&amp;gt; departments) {
        checkNotNull(name, &quot;Invalid name provided&quot;);
        checkArgument(!name.isEmpty(), &quot;The provided name cannot be empty&quot;);

        checkNotNull(departments, &quot;Invalid department list provided&quot;);
        checkArgument(!departments.isEmpty(), &quot;The provided department list cannot be empty&quot;);

        this.name = name;
        this.departments = departments;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Using static imports for Preconditions helps remove excess noise from the verification code and is recommended by the Google documentation&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you can see, the &lt;strong&gt;Preconditions&lt;/strong&gt; methods wrap all of that previous boiler-plate logic which allows us to write much cleaner code.  It&amp;#8217;s useful to mention that &lt;code&gt;checkNotNull()&lt;/code&gt; returns the provided reference if it is not null.  This allows for precondition calls to be &quot;chained&quot; together to make the implementation even more simplistic.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums java language-java&quot;&gt;&lt;code&gt;public class School {
    private final String name;
    private final List&amp;lt;String&amp;gt; departments;

    /**
     * @param name The school name, not null or empty
     * @param departments The list of departments at the school, not null or empty
     */
    public School(final String name, final List&amp;lt;String&amp;gt; departments) {
        checkArgument(!checkNotNull(name).isEmpty(), &quot;The provided name cannot be empty&quot;);
        checkArgument(!checkNotNull(departments).isEmpty(), &quot;The provided department list cannot be empty&quot;);

        this.name = name;
        this.departments = departments;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While this definitely cuts out a little bit of code, I don&amp;#8217;t recommend this approach since it&amp;#8217;s easier to debug when each precondition verification is on a separate line.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_verifying_state_before_running_an_operation&quot;&gt;Verifying State Before Running an Operation&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s say that you have a class that provides start/stop operation semantics.  For example, the class may consume data from a datasource only if it isn&amp;#8217;t currently consuming data.  Similarly, you can only stop data consumption if the consumption process has been started.  While these operations may typically be implemented as a no-operation (no-op), let&amp;#8217;s assume that we have strict semantics and an exception must be thrown to the client caller to let it know that it has called this class instance when in it was in an invalid state.   A simple way to do this would be to check the value of a flag in each method.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;DataConsumer.java&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums java language-java&quot;&gt;&lt;code&gt;package guava.demo.preconditions;

import java.util.concurrent.atomic.AtomicBoolean;

import static com.google.common.base.Preconditions.checkState;

public final class DataConsumer {
    private static final AtomicBoolean startedConsumption = new AtomicBoolean(false);

    /**
     * Attempts to consume data from the datasource.  This method cannot be called until consumption has stopped.
     */
    public static void startConsuming() {
        checkState(!startedConsumption.get(), &quot;Consumption cannot be started until it has been stopped&quot;);

        //doConsumption();

        startedConsumption.set(true);
    }

    /**
     * Attempts to stop consuming data from the datasource and cleanup existing resources.  This method cannot be
     * called until consumption has started.
     */
    public static void stopConsuming() {
        checkState(startedConsumption.get(), &quot;Consumption cannot be stopped since it was never started&quot;);

        //stopAndCleanup();

        startedConsumption.set(false);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;While this is an admittedly contrived example, you should be able to see how &lt;code&gt;checkState()&lt;/code&gt; can be used to examine the internal state of an object to verify a method contract.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_what_about_java_s_built_in_utilities&quot;&gt;What About Java&amp;#8217;s Built-in Utilities?&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By now you&amp;#8217;re probably wondering why we don&amp;#8217;t just use &lt;code&gt;assert&lt;/code&gt; statements everywhere.  The problem with using asserts is that they&amp;#8217;re usually disabled on production JVMs and thus render your precondition verifications useless.  When debugging a problem in a production environment it&amp;#8217;s nice to be able to check the application logs for stacktraces that would point to a failed precondition check immediately.  Also, using &lt;code&gt;assert&lt;/code&gt; statements would bring back the ugly boiler-plate code that we saw in our initial implementation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Fair enough, but what about JDK 7&amp;#8217;s &lt;code&gt;Objects.requireNonNull()&lt;/code&gt; &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/util/Objects.html#requireNonNull%28java.lang.Object,java.lang.String%29&quot;&gt;method&lt;/a&gt;?  Obviously, this requires you to be working in a Java 7 environment so that could be a non-starter for some people.  The only difference that I&amp;#8217;m aware of is that you can&amp;#8217;t use printf-style messages when providing an error message.  I&amp;#8217;d say go ahead and use it, but if you already have Guava on the classpath I&amp;#8217;d stick with &lt;strong&gt;Preconditions&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_final_thoughts&quot;&gt;Final Thoughts&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you have Guava on your classpath, you should strongly consider utilizing &lt;strong&gt;Preconditions&lt;/strong&gt; to implement runtime contract precondition verification.  By following this approach, your code will fail early before any damage can potentially be done.  Additionally, it allows your code to avoid running resource intensive code segments that will fail due to a &lt;strong&gt;NullPointerException&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;It&amp;#8217;s much easier to track down a runtime failure due to a precondition constraint violation.  Not only does it make your code more readable and testable, it&amp;#8217;ll save you time when debugging issues in production.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Guava Goodies: Create &quot;fluent&quot; Comparators with Ordering</title>
      <link>http://akeffalas.github.io/blog/2014/05/guava-goodies-fluent-ordering.html</link>
      <pubDate>Fri, 30 May 2014 00:00:00 -0400</pubDate>
      <guid isPermaLink="false">/2014/05/guava-goodies-fluent-ordering.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you haven&amp;#8217;t had the pleasure of using Google&amp;#8217;s &lt;a href=&quot;https://code.google.com/p/guava-libraries&quot;&gt;Guava&lt;/a&gt; library with your favorite JVM-based language, I hope that I can convince you to give it a spin.  In my opinion, Guava is one of those must-have libraries that should be on your classpath for practically any project.  This post will be the first of several that will spotlight some of my favorite utilities provided by Guava.  Enough with the flattery, let&amp;#8217;s take a look at what makes &lt;strong&gt;Ordering&lt;/strong&gt; so useful.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The &lt;strong&gt;Ordering&lt;/strong&gt; &lt;a href=&quot;https://code.google.com/p/guava-libraries/wiki/OrderingExplained&quot;&gt;wiki&lt;/a&gt; states that the class should be thought of as a &quot;fluent&quot; &lt;strong&gt;Comparator&lt;/strong&gt;.  What does this mean?  Well, first off &lt;strong&gt;Ordering&lt;/strong&gt; is an implementation of Java&amp;#8217;s &lt;a href=&quot;http://docs.oracle.com/javase/7/docs/api/java/util/Comparator.html&quot;&gt;Comparator&lt;/a&gt; interface.  Therefore, any place that you can use a &lt;strong&gt;Comparator&lt;/strong&gt;, you can use an &lt;strong&gt;Ordering&lt;/strong&gt; instance.  What makes &lt;strong&gt;Ordering&lt;/strong&gt; fluent?  Take a glance at the &lt;a href=&quot;http://docs.guava-libraries.googlecode.com/git/javadoc/com/google/common/collect/Ordering.html&quot;&gt;API&lt;/a&gt;.  The method names and how they&amp;#8217;re chained together is what provides the powerful fluency; performing operations just makes sense due to its readability.  Let&amp;#8217;s look at some examples to see things in action.&lt;/p&gt;
&lt;/div&gt;
&lt;!--continue--&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_sorting&quot;&gt;Sorting&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;A &lt;code&gt;natural()&lt;/code&gt; &lt;strong&gt;Ordering&lt;/strong&gt; can be used to sort a &lt;strong&gt;Collection&lt;/strong&gt; based on the &lt;strong&gt;Comparator&lt;/strong&gt; defined for the type contained in the collection being sorted.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Demo.java&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums java language-java&quot;&gt;&lt;code&gt;package guava.demo.ordering;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import com.google.common.collect.Ordering;

public class Demo {
    public static void main(final String[] args) {
        final List&amp;lt;String&amp;gt; values = Arrays.asList(&quot;one&quot;, &quot;two&quot;, &quot;buckle&quot;, &quot;my&quot;, &quot;shoe&quot;);

        Collections.sort(values, Ordering.natural()); &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
        System.out.println(values);
    }
}

// Outputs: [buckle, my, one, shoe, two]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Sort the collection using the default &lt;strong&gt;String&lt;/strong&gt; &lt;code&gt;compare()&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_reverse_sort&quot;&gt;Reverse Sort&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Pretty easy, right?  How would you go about performing a reverse sort?  By using the &lt;code&gt;reverse()&lt;/code&gt; method, of course!&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums java language-java&quot;&gt;&lt;code&gt;final List&amp;lt;String&amp;gt; values = Arrays.asList(&quot;one&quot;, &quot;two&quot;, &quot;buckle&quot;, &quot;my&quot;, &quot;shoe&quot;);
Collections.sort(values, Ordering.natural().reverse());

System.out.println(values);

// Outputs: [two, shoe, one, my, buckle]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here we&amp;#8217;ve chained two &lt;strong&gt;Ordering&lt;/strong&gt; comparators together to sort the collection by the &lt;strong&gt;String&lt;/strong&gt;&apos;s &lt;strong&gt;Comparator&lt;/strong&gt; and then apply the reverse &lt;strong&gt;Ordering&lt;/strong&gt; to sort the collection in descending order.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_detecting_ordered_values&quot;&gt;Detecting Ordered Values&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What if you have an &lt;strong&gt;Iterable&lt;/strong&gt; and want to determine if it is already sorted?  &lt;strong&gt;Ordering&lt;/strong&gt; provides the &lt;code&gt;isOrdered()&lt;/code&gt; method to check if the provided &lt;strong&gt;Iterable&lt;/strong&gt; is sorted based on the defined &lt;strong&gt;Ordering&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums java language-java&quot;&gt;&lt;code&gt;final List&amp;lt;String&amp;gt; values = Arrays.asList(&quot;one&quot;, &quot;two&quot;, &quot;buckle&quot;, &quot;my&quot;, &quot;shoe&quot;);
System.out.println(Ordering.natural().isOrdered(values));

// Outputs: false&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_detecting_duplicate_values&quot;&gt;Detecting Duplicate Values&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you have duplicate values in the &lt;strong&gt;Iterable&lt;/strong&gt;, &lt;code&gt;isOrdered()&lt;/code&gt; will return true if and only if they&amp;#8217;re sorted correctly.  If you preferred a strict ordering such that there should be no duplicates, &lt;strong&gt;Ordering&lt;/strong&gt; has you covered with &lt;code&gt;isStrictlyOrdered()&lt;/code&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums java language-java&quot;&gt;&lt;code&gt;final List&amp;lt;String&amp;gt; values = Arrays.asList(&quot;one&quot;, &quot;two&quot;, &quot;buckle&quot;, &quot;two&quot;, &quot;my&quot;, &quot;shoe&quot;);
System.out.println(Ordering.natural().isStrictlyOrdered(values));

// Outputs: false&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_handling_null_values&quot;&gt;Handling Null Values&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;What if you had null references in the collection?  By default, a natural &lt;strong&gt;Ordering&lt;/strong&gt; will throw a &lt;strong&gt;NullPointerException&lt;/strong&gt; if a null is in the collection.  However, if you want to allow nulls &lt;strong&gt;Ordering&lt;/strong&gt; lets you specify their sort order to either all occur before or after the non-null values in the collection.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums java language-java&quot;&gt;&lt;code&gt;final List&amp;lt;String&amp;gt; valuesWithNulls = Arrays.asList(&quot;one&quot;, null, &quot;two&quot;, &quot;buckle&quot;, null, &quot;my&quot;, &quot;shoe&quot;);
Collections.sort(valuesWithNulls, Ordering.natural().nullsFirst()); &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;

System.out.println(valuesWithNulls);

// Outputs: [null, null, buckle, my, one, shoe, two]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Sort the nulls first&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums java language-java&quot;&gt;&lt;code&gt;final List&amp;lt;String&amp;gt; valuesWithNulls = Arrays.asList(&quot;one&quot;, null, &quot;two&quot;, &quot;buckle&quot;, null, &quot;my&quot;, &quot;shoe&quot;);
Collections.sort(valuesWithNulls, Ordering.natural().nullsLast()); &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;

System.out.println(valuesWithNulls);

// Outputs: [buckle, my, one, shoe, two, null, null]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Sort the nulls last&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_creating_a_custom_ordering&quot;&gt;Creating a Custom Ordering&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This is great and all, but how do you create your own &lt;strong&gt;Ordering&lt;/strong&gt;?  Easy!  Just instantiate a new &lt;strong&gt;Ordering&lt;/strong&gt; and override its &lt;code&gt;compare()&lt;/code&gt; method.  Suppose you wanted to create an &lt;strong&gt;Ordering&lt;/strong&gt; that compared elements based on their &lt;strong&gt;String&lt;/strong&gt; length:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums java language-java&quot;&gt;&lt;code&gt;final Ordering&amp;lt;String&amp;gt; byLength = new Ordering&amp;lt;String&amp;gt;() {
   @Override
   public int compare(final String first, final String second) {
      return Integer.compare(first.length(), second.length()); &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
   }
};

final List&amp;lt;String&amp;gt; values = Arrays.asList(&quot;one&quot;, &quot;two&quot;, &quot;buckle&quot;, &quot;my&quot;, &quot;shoe&quot;);
Collections.sort(values, byLength);

// Outputs: [my, two, one, shoe, buckle]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Using Java 7&amp;#8217;s built-in &lt;code&gt;compare()&lt;/code&gt; on &lt;strong&gt;Integer&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;sect3&quot;&gt;
&lt;h4 id=&quot;_use_with_a_compound_ordering&quot;&gt;Use with a Compound Ordering&lt;/h4&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now what if we wanted to sort based on &lt;strong&gt;String&lt;/strong&gt; length as well as value.  We can use &lt;code&gt;compound()&lt;/code&gt; to provide a tie-breaker comparator to chain together the two orderings required to meet our needs.  In our case, we&amp;#8217;ll use the &lt;code&gt;byLength&lt;/code&gt; ordering with &lt;code&gt;Ordering.natural()&lt;/code&gt; to break ties.  Therefore, if we have two strings of equal length they&amp;#8217;ll be compared based on their lexographical ordering.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums java language-java&quot;&gt;&lt;code&gt;Collections.sort(values, byLength.compound(Ordering.natural()));
System.out.println(values);

// Outputs: [my, one, two, shoe, buckle]&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_find_the_min_max_value&quot;&gt;Find the Min/Max Value&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Suppose that you have an unsorted &lt;strong&gt;Iterable&lt;/strong&gt; and need to find the minimum and maximum value contained within it based on a specific &lt;strong&gt;Ordering&lt;/strong&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums java language-java&quot;&gt;&lt;code&gt;final List&amp;lt;Integer&amp;gt; numbers = Arrays.asList(1, 14, 15, 7, 94, 3);
System.out.println(Ordering.natural().min(numbers));
System.out.println(Ordering.natural().max(numbers));

// Outputs: 1 94&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_final_thoughts&quot;&gt;Final Thoughts&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There is plenty more that can be done with &lt;strong&gt;Ordering&lt;/strong&gt;, but I think the brief examples of its &quot;fluent&quot; API provided here should be enough to whet your appetite to experiment some more.  Do yourself a favor and look at the &lt;code&gt;onResultOf()&lt;/code&gt; method to see how flexible (and fluent) &lt;strong&gt;Ordering&lt;/strong&gt; can be.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;If you haven&amp;#8217;t used Guava before I urge you to throw it on your classpath and don&amp;#8217;t look back. Be on the lookout for future Guava Goodies posts!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Create Immutable Objects with Java</title>
      <link>http://akeffalas.github.io/blog/2014/04/java-create-immutable-objects.html</link>
      <pubDate>Tue, 29 Apr 2014 00:00:00 -0400</pubDate>
      <guid isPermaLink="false">/2014/04/java-create-immutable-objects.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Have you ever had to endure the &lt;a href=&quot;http://www.osnews.com/images/comics/wtfm.jpg&quot;&gt;agony&lt;/a&gt; of debugging a piece of code that mutates the state of an object several times throughout an application?  Not only is that type of code ugly and unpredictable, it&amp;#8217;s downright dangerous when dealing with multiple threads.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An immutable object ensures that its internal state cannot be changed after instantiation.  Why does this matter?  This provides an immediate benefit when working with multi-threaded code in that no synchronization needs to be performed since the object does not offer any shared, mutable state between threads.  Therefore, the state of the object remains the same throughout its lifetime which makes the object automatically thread-safe.&lt;/p&gt;
&lt;/div&gt;
&lt;!--continue--&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_immutable_object_rules&quot;&gt;Immutable Object Rules&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are several simple rules that can be applied to the definition of a Java class to ensure that it allows for the creation of immutable objects:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Make all instance fields private and final&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Eliminate all methods that can mutate state&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Prevent subclasses from subverting immutable behavior&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Avoid storing references to mutable objects&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_making_a_pojo_immutable&quot;&gt;Making a POJO Immutable&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Suppose that we&amp;#8217;d like to make a basic Plain Old Java Object that exhibits immutable behavior.  Let&amp;#8217;s start with the following &lt;strong&gt;Team&lt;/strong&gt; class:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Team.java&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums java language-java&quot;&gt;&lt;code&gt;package immutable;

import java.util.List;

public class Team {
    private String teamName;
    private List&amp;lt;String&amp;gt; playerNames;

    public void setTeamName(final String name) {
        teamName = name;
    }

    public String getTeamName() {
        return teamName;
    }

    public void setPlayerNames(final List&amp;lt;String&amp;gt; names) {
        playerNames = names;
    }

    public List&amp;lt;String&amp;gt; getPlayerNames() {
        return playerNames;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There&amp;#8217;s nothing surprising here, just a simple POJO used to model a team that has a name and a collection of player names.  Right away you should be able to see that the rules for immutability have been violated.  Let&amp;#8217;s transform this lowly POJO into a mighty Immutable Object.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_protect_internal_state&quot;&gt;Protect Internal State&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first immutability problem with &lt;strong&gt;Team&lt;/strong&gt; is that it allows the object&amp;#8217;s state to be manipulated at any time.  This can easily be fixed by removing all methods that allow for state manipulation and make all fields private and final.  After making these changes all of the information for a &lt;strong&gt;Team&lt;/strong&gt; instance is now required at instantiation time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Team.java&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums java language-java&quot;&gt;&lt;code&gt;package immutable;

import java.util.List;

public class Team {
    private final String teamName;
    private final List&amp;lt;String&amp;gt; playerNames;

    public Team(final String name, final List&amp;lt;String&amp;gt; players) {
        teamName = name;
        playerNames = players;
    }

    public String getTeamName() {
        return teamName;
    }

    public List&amp;lt;String&amp;gt; getPlayerNames() {
        return playerNames;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_avoid_subverting_immutable_behavior&quot;&gt;Avoid Subverting Immutable Behavior&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The easiest way to ensure that immutable behavior cannot be tampered with by a subclass overriding methods is to mark the class as final to prevent subclassing all together.  Another approach would be to make the class&amp;#8217;s constructor private and require object construction to be done through static factory methods.  Let&amp;#8217;s go ahead and mark &lt;strong&gt;Team&lt;/strong&gt; as final.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_perform_defensive_copies&quot;&gt;Perform Defensive Copies&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Even after performing the previous steps &lt;strong&gt;Team&lt;/strong&gt; is still &lt;u&gt;not&lt;/u&gt; immutable.  How can that be?  A &lt;strong&gt;Team&lt;/strong&gt; instance is constructed with an immutable &lt;strong&gt;String&lt;/strong&gt; instance for the team name, but the player names associated with a &lt;strong&gt;Team&lt;/strong&gt; is stored in a mutable &lt;strong&gt;List&lt;/strong&gt; object reference.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here&amp;#8217;s how this can be exploited to bypass immutability:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Driver.java&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums java language-java&quot;&gt;&lt;code&gt;public class Driver {
    public static void main(final String[] args) {
    	final String teamName = &quot;My Team&quot;;
    	final List&amp;lt;String&amp;gt; players = new ArrayList&amp;lt;&amp;gt;();
    	players.add(&quot;Foo&quot;);

        final Team team = new Team(teamName, players);
        players.add(&quot;Bar&quot;);

        System.out.println(team.getPlayerNames()); &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Outputs both players &quot;Foo&quot; and &quot;Bar&quot;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The problem here is that the &lt;code&gt;players&lt;/code&gt; object reference is created and maintained by the &lt;strong&gt;Driver&lt;/strong&gt; class and the reference is passed by value to the &lt;strong&gt;Team&lt;/strong&gt; instance.  After &lt;strong&gt;Team&lt;/strong&gt; creation, the &lt;code&gt;players&lt;/code&gt; list (which is still an object reference stored within the &lt;strong&gt;Team&lt;/strong&gt; instance) is modified and the call to &lt;code&gt;team.getPlayerNames()&lt;/code&gt; will return the contents of the &lt;code&gt;players&lt;/code&gt; list.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This can be fixed by making a defensive copy of the provided object reference in the &lt;strong&gt;Team&lt;/strong&gt; constructor so that the &lt;strong&gt;Team&lt;/strong&gt; object maintains a copy of the original list of player names.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Team.java&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums java language-java&quot;&gt;&lt;code&gt;public Team(final String name, final List&amp;lt;String&amp;gt; players) {
    teamName = name;
    playerNames = new ArrayList&amp;lt;&amp;gt;(players); &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Make a defensive copy of the provided container&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Alright, we&amp;#8217;ve made the defensive copy upon instantiation so &lt;strong&gt;Team&lt;/strong&gt; must be immutable now, right?  Not so fast!  The &lt;code&gt;getPlayerNames()&lt;/code&gt; method from &lt;strong&gt;Team&lt;/strong&gt; is susceptible to modification since it currently returns the object reference to the player name list.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Driver.java&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums java language-java&quot;&gt;&lt;code&gt;public class Driver {
    public static void main(final String[] args) {
        final String teamName = &quot;My Team&quot;;
        final List&amp;lt;String&amp;gt; players = new ArrayList&amp;lt;&amp;gt;();
        players.add(&quot;Foo&quot;);

        final Team team = new Team(teamName, players);
        final List&amp;lt;String&amp;gt; teamPlayers = team.getPlayerNames();

        System.out.println(teamPlayers); &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
        teamPlayers.add(&quot;Bar&quot;);
        System.out.println(team.getPlayerNames()); &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Outputs &quot;Foo&quot;, as expected&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Outputs &quot;Foo&quot; and &quot;Bar&quot;, uh-oh!&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you can see, &lt;strong&gt;Team&lt;/strong&gt; is still not immutable because the reference to the players list is returned via &lt;code&gt;getPlayerNames()&lt;/code&gt;.  This reference can be held by the &lt;strong&gt;Driver&lt;/strong&gt; class and mutated which modifies the internal state of a &lt;strong&gt;Team&lt;/strong&gt; instance.  Once again, the fix is to create a defensive copy.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_our_mighty_immutable_object&quot;&gt;Our Mighty Immutable Object&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here is the &lt;strong&gt;Team&lt;/strong&gt; class fully transformed to support immutable object creation:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Team.java&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums java language-java&quot;&gt;&lt;code&gt;package immutable;

import java.util.ArrayList;
import java.util.List;
import net.jcip.annotations.Immutable;
import net.jcip.annotations.ThreadSafe;

@Immutable  &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
@ThreadSafe
public final class Team {
    private final String teamName;
    private final List&amp;lt;String&amp;gt; playerNames;

    public Team(final String name, final List&amp;lt;String&amp;gt; players) {
        teamName = name;
        playerNames = new ArrayList&amp;lt;&amp;gt;(players);
    }

    public String getTeamName() {
        return teamName;
    }

    public List&amp;lt;String&amp;gt; getPlayerNames() {
        return new ArrayList&amp;lt;&amp;gt;(playerNames);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://jcip.net.s3-website-us-east-1.amazonaws.com/&quot;&gt;Java Concurrency In Practice&lt;/a&gt; annotations used to convey intent&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_final_thoughts&quot;&gt;Final Thoughts&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Understanding the usefulness of immutable objects and how to create one is important to carry along with you on your knowledge tool belt.  However, the most obvious downside to using immutable objects is that in order to change its state a brand new instance must be constructed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Additionally, caution must be used if the immutable object requires making defensive copies of large, mutable objects.  More than likely this won&amp;#8217;t be a problem unless you&amp;#8217;re making a large number of copies in a tight loop since that could be very slow and chew up your heap space.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Although it may be wise to prefer an immutable object, you must choose what best fits your application.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Include Jenkins Build Info With a Grails WAR File</title>
      <link>http://akeffalas.github.io/blog/2014/04/jenkins-build-info-grails-war.html</link>
      <pubDate>Fri, 11 Apr 2014 00:00:00 -0400</pubDate>
      <guid isPermaLink="false">/2014/04/jenkins-build-info-grails-war.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Are you looking for a way to associate your continuous integration server&amp;#8217;s build information with your web application?  I&amp;#8217;ve already &lt;a href=&quot;http://akeffalas.github.io/blog/2014/04/jenkins-build-info-maven-artifacts.html&quot;&gt;discussed&lt;/a&gt; how to easily inject the properties from a Jenkins build job into your Maven artifacts.  Let&amp;#8217;s see how a similar approach can be used for a packaged Grails WAR file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;ll assume that you have access to the following Jenkins job&amp;#8217;s &lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Building+a+software+project#Buildingasoftwareproject-JenkinsSetEnvironmentVariables&quot;&gt;environment variables&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;BUILD_NUMBER&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GIT_COMMIT&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;!--continue--&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Using this build information, you&amp;#8217;ll be able to add the following details to the &lt;code&gt;MANIFEST.MF&lt;/code&gt; file of a Grails web archive file:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Build time&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Build number&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Source code revision (SVN revision number or Git commit hash)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_grails_event_configuration&quot;&gt;Grails Event Configuration&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The simplest way to add entries and attributes to the archive&amp;#8217;s manifest file is to inject build properties during the war creation phase.  Grails exposes this capability via the &lt;strong&gt;eventCreateWarStart&lt;/strong&gt; event.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Create a &lt;code&gt;_Events.groovy&lt;/code&gt; file inside of your Grails application&amp;#8217;s &lt;code&gt;scripts&lt;/code&gt; directory.  This script file will run during a &lt;code&gt;grails war&lt;/code&gt; (or &lt;code&gt;mvn package&lt;/code&gt; if using the &lt;a href=&quot;https://github.com/grails/grails-maven&quot;&gt;Grails Maven plugin&lt;/a&gt;) command-line invocation.  The war creation event notification will fire and the closure defined by &lt;code&gt;eventCreateWarStart&lt;/code&gt; will execute.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;_Events.groovy&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums groovy language-groovy&quot;&gt;&lt;code&gt;eventCreateWarStart = { warName, stagingDir -&amp;gt;
    def unknownValue = &apos;UNKNOWN&apos;

    def buildNumberEnvironment = &apos;BUILD_NUMBER&apos;
    def scmRevisionEnvironment = &apos;GIT_COMMIT&apos;

    def buildNumberProperty = &apos;build.number&apos;
    def scmRevisionProperty = &apos;build.revision&apos;

    def buildNumber = System.getenv(buildNumberEnvironment)     &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;

    if( !buildNumber ) {        &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
        buildNumber = System.getProperty(buildNumberProperty, unknownValue)
    }


    def scmRevision = System.getenv(scmRevisionEnvironment)

    if( !scmRevision ) {
        scmRevision = System.getProperty(scmRevisionProperty, unknownValue)
    }


    ant.propertyfile(file:&quot;${stagingDir}/WEB-INF/classes/application.properties&quot;) {
        entry(key:&apos;app.version.buildNumber&apos;, value: buildNumber)        &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
    }

    ant.manifest(file: &quot;${stagingDir}/META-INF/MANIFEST.MF&quot;, mode: &quot;update&quot;) {
        attribute(name: &quot;Build-Time&quot;, value: new Date())        &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;

        section(name: &quot;Grails Application&quot;) {       &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
            attribute(name: &quot;Implementation-Build-Number&quot;, value: buildNumber)
            attribute(name: &quot;Implementation-SCM-Revision&quot;, value: scmRevision)
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Try to get the build number from an environment variable (Jenkins job)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Otherwise, check for a system property (this allows for overriding via the command-line)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Add the build number to the application.properties file for usage in the application&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Add the build time to the manifest&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Add a manifest entry with the build info attributes&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_results&quot;&gt;Results&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Upon build completion, the WAR file that has been created will now have a &lt;code&gt;MANIFEST.MF&lt;/code&gt; file that contains the following entries:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;MANIFEST.MF&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;Build Details

Build-Time: 2014-04-11 14:22:13

Grails Application

Implementation-Build-Number: 742
Implementation-SCM-Revision: d0c60c86219ebe6f700b3fc161606325325cc567&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Additionally, the build number will also be added to the application&amp;#8217;s properties file which allows for easy injection into a Grails GSP file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;application.properties&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;app.version.buildNumber=742&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This information will help you determine which version of the web application is running which can be quite handy during debugging or for production deployment.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Associate Jenkins Build Info with Maven Artifacts</title>
      <link>http://akeffalas.github.io/blog/2014/04/jenkins-build-info-maven-artifacts.html</link>
      <pubDate>Sun, 6 Apr 2014 00:00:00 -0400</pubDate>
      <guid isPermaLink="false">/2014/04/jenkins-build-info-maven-artifacts.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;How many times have you tried to debug a problem with one of your components in production without knowing which revision of the codebase has been deployed?  Many times the Maven artifact version number isn&amp;#8217;t sufficient.  Sure, you know the release version of a certain JAR file (1.0.1000 for example), but how do you know if this contains a specific source code commit?  Not to mention debugging during development when your artifact versions are typically *-SNAPSHOT; that&amp;#8217;s not very useful at all.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;re going to configure a poor man&amp;#8217;s configuration management scheme to incorporate more information with your build artifacts.  Let&amp;#8217;s assume that you have a continuous integration server setup to build your project&amp;#8217;s artifacts.  Here are some pieces of information that would be useful to bundle with a JAR, WAR, etc.:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Build time&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Build number&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Source code revision  (SVN revision number or Git commit hash)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;!--continue--&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For this article, it is assumed that your CI server is running &lt;a href=&quot;http://jenkins-ci.org&quot;&gt;Jenkins&lt;/a&gt; and that you are using &lt;a href=&quot;http://git-scm.com/&quot;&gt;git&lt;/a&gt; for source code management.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, how can you get this build information from Jenkins? Thankfully, there are a number of &lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Building+a+software+project#Buildingasoftwareproject-JenkinsSetEnvironmentVariables&quot;&gt;environment variables&lt;/a&gt; that Jenkins exposes by default.  The &lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Git+Plugin&quot;&gt;Jenkins git plugin&lt;/a&gt; will provide the git-specific variables.  Here are the variables that we&amp;#8217;ll be using:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;BUILD_NUMBER&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GIT_COMMIT&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_maven_project_configuration&quot;&gt;Maven Project Configuration&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now that we know how to get the data from Jenkins, we need a way to inject it into our build.  This can be achieved by writing the information to an artifact&amp;#8217;s MANIFEST.MF file.  We can use Maven&amp;#8217;s JAR plugin to perform &lt;a href=&quot;http://maven.apache.org/plugins/maven-jar-plugin/examples/manifest-customization.html&quot;&gt;manifest customization&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the Maven project&amp;#8217;s POM file we&amp;#8217;ll add a few properties that can be used to inject the build details:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;pom.xml&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums xml language-xml&quot;&gt;&lt;code&gt;&amp;lt;properties&amp;gt;
    &amp;lt;build.manifest.section&amp;gt;Build Details&amp;lt;/build.manifest.section&amp;gt;
    &amp;lt;build.unknown&amp;gt;UNKNOWN&amp;lt;/build.unknown&amp;gt;
    &amp;lt;build.number&amp;gt;${build.unknown}&amp;lt;/build.number&amp;gt;
    &amp;lt;build.revision&amp;gt;${build.unknown}&amp;lt;/build.revision&amp;gt;
&amp;lt;/properties&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_manifest_customization&quot;&gt;Manifest Customization&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s go ahead and customize the manifest for our Maven project&amp;#8217;s JAR artifact:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;pom.xml&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums xml language-xml&quot;&gt;&lt;code&gt;&amp;lt;plugins&amp;gt;
    &amp;lt;plugin&amp;gt;
        &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;maven-assembly-plugin&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;2.4&amp;lt;/version&amp;gt;
        &amp;lt;configuration&amp;gt;
            &amp;lt;archive&amp;gt;
                &amp;lt;manifest&amp;gt;
                    &amp;lt;addClasspath&amp;gt;true&amp;lt;/addClasspath&amp;gt;
                &amp;lt;/manifest&amp;gt;
                &amp;lt;manifestEntries&amp;gt;
                    &amp;lt;Build-Time&amp;gt;${maven.build.timestamp}&amp;lt;/Build-Time&amp;gt;  &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
                &amp;lt;/manifestEntries&amp;gt;
                &amp;lt;manifestSections&amp;gt;
                    &amp;lt;manifestSection&amp;gt;
                        &amp;lt;name&amp;gt;${build.manifest.section}&amp;lt;/name&amp;gt;
                        &amp;lt;manifestEntries&amp;gt;
                            &amp;lt;Implementation-Title&amp;gt;${project.name}&amp;lt;/Implementation-Title&amp;gt;
                            &amp;lt;Implementation-Version&amp;gt;${project.version}&amp;lt;/Implementation-Version&amp;gt;
                            &amp;lt;Implementation-Build-Number&amp;gt;${build.number}&amp;lt;/Implementation-Build-Number&amp;gt;
                            &amp;lt;Implementation-SCM-Revision&amp;gt;${build.revision}&amp;lt;/Implementation-SCM-Revision&amp;gt;
                        &amp;lt;/manifestEntries&amp;gt;
                    &amp;lt;/manifestSection&amp;gt;
                &amp;lt;/manifestSections&amp;gt;
            &amp;lt;/archive&amp;gt;
        &amp;lt;/configuration&amp;gt;
    &amp;lt;/plugin&amp;gt;
&amp;lt;/plugins&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Maven&amp;#8217;s built-in build timestamp property&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With this configuration, the MANIFEST.MF file will contain the classpath and other default manifest entries along with the added &lt;code&gt;Build-Time&lt;/code&gt; entry.  A new manifest section has been added to separate the Jenkins build details from other manifest entries.  This section will contain the Jenkins job&amp;#8217;s build number and the git commit hash.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By default, the artifact&amp;#8217;s build number and source code revision will be set to &lt;strong&gt;UNKNOWN&lt;/strong&gt; unless their respective properties are assigned.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_jenkins_build_info_injection&quot;&gt;Jenkins Build Info Injection&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To assign these properties, go into the Jenkins job&amp;#8217;s configuration and modify the Maven Build&amp;#8217;s &quot;Goals and options&quot; to: &lt;code&gt;clean install -Dbuild.number=${BUILD_NUMBER} -Dbuild.revision=${GIT_COMMIT}&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Save the job configuration and execute a new build.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_resulting_embedded_manifest&quot;&gt;Resulting Embedded Manifest&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Upon build completion, the JAR file that has been created will now have a MANIFEST.MF file that contains the following entries:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;MANIFEST.MF&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;Manifest-Version: 1.0
Built-By: jenkins
Build-Jdk: 1.7.0_49
Created-By: Apache Maven
Build-Time: 2014-04-05 18:53:13

Build Details

Implementation-Title: &amp;lt;project_name&amp;gt;
Implementation-Version: &amp;lt;project_version&amp;gt;
Implementation-Build-Number: 742
Implementation-SCM-Revision: d0c60c86219ebe6f700b3fc161606325325cc567&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now that this information is bundled with the JAR file you can easily determine if this artifact contains the code commit that you&amp;#8217;re looking for by consulting your git repository and/or the build log from your Jenkins job.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;No more guessing about what is and is not in the component that you&amp;#8217;re debugging.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>

  </channel> 
</rss>
