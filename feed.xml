<?xml version="1.0"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>The Programmer's Tool Belt</title>
    <link>http://akeffalas.github.io/blog</link>
    <atom:link href="http://akeffalas.github.io/blog/feed.xml" rel="self" type="application/rss+xml" />
    <description>Programming wisdom for your knowledge tool belt.</description>
    <language>en-gb</language>
    <pubDate>Sun, 11 May 2014 13:30:03 -0400</pubDate>
    <lastBuildDate>Sun, 11 May 2014 13:30:03 -0400</lastBuildDate>

    <item>
      <title>Create Immutable Objects with Java</title>
      <link>http://akeffalas.github.io/blog/2014/04/java-create-immutable-objects.html</link>
      <pubDate>Tue, 29 Apr 2014 00:00:00 -0400</pubDate>
      <guid isPermaLink="false">/2014/04/java-create-immutable-objects.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Have you ever had to endure the &lt;a href=&quot;http://www.osnews.com/images/comics/wtfm.jpg&quot;&gt;agony&lt;/a&gt; of debugging a piece of code that mutates the state of an object several times throughout an application?  Not only is that type of code ugly and unpredictable, it&amp;#8217;s downright dangerous when dealing with multiple threads.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;An immutable object ensures that its internal state cannot be changed after instantiation.  Why does this matter?  This provides an immediate benefit when working with multi-threaded code in that no synchronization needs to be performed since the object does not offer any shared, mutable state between threads.  Therefore, the state of the object remains the same throughout its lifetime which makes the object automatically thread-safe.&lt;/p&gt;
&lt;/div&gt;
&lt;!--continue--&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_immutable_object_rules&quot;&gt;Immutable Object Rules&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There are several simple rules that can be applied to the definition of a Java class to ensure that it allows for the creation of immutable objects:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Make all instance fields private and final&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Eliminate all methods that can mutate state&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Prevent subclasses from subverting immutable behavior&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Avoid storing references to mutable objects&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_making_a_pojo_immutable&quot;&gt;Making a POJO Immutable&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Suppose that we&amp;#8217;d like to make a basic Plain Old Java Object that exhibits immutable behavior.  Let&amp;#8217;s start with the following &lt;strong&gt;Team&lt;/strong&gt; class:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Team.java&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums java language-java&quot;&gt;&lt;code&gt;package immutable;

import java.util.List;

public class Team {
    private String teamName;
    private List&amp;lt;String&amp;gt; playerNames;

    public void setTeamName(final String name) {
        teamName = name;
    }

    public String getTeamName() {
        return teamName;
    }

    public void setPlayerNames(final List&amp;lt;String&amp;gt; names) {
        playerNames = names;
    }

    public List&amp;lt;String&amp;gt; getPlayerNames() {
        return playerNames;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;There&amp;#8217;s nothing surprising here, just a simple POJO used to model a team that has a name and a collection of player names.  Right away you should be able to see that the rules for immutability have been violated.  Let&amp;#8217;s transform this lowly POJO into a mighty Immutable Object.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_protect_internal_state&quot;&gt;Protect Internal State&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The first immutability problem with &lt;strong&gt;Team&lt;/strong&gt; is that it allows the object&amp;#8217;s state to be manipulated at any time.  This can easily be fixed by removing all methods that allow for state manipulation and make all fields private and final.  After making these changes all of the information for a &lt;strong&gt;Team&lt;/strong&gt; instance is now required at instantiation time.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Team.java&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums java language-java&quot;&gt;&lt;code&gt;package immutable;

import java.util.List;

public class Team {
    private final String teamName;
    private final List&amp;lt;String&amp;gt; playerNames;

    public Team(final String name, final List&amp;lt;String&amp;gt; players) {
        teamName = name;
        playerNames = players;
    }

    public String getTeamName() {
        return teamName;
    }

    public List&amp;lt;String&amp;gt; getPlayerNames() {
        return playerNames;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_avoid_subverting_immutable_behavior&quot;&gt;Avoid Subverting Immutable Behavior&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The easiest way to ensure that immutable behavior cannot be tampered with by a subclass overriding methods is to mark the class as final to prevent subclassing all together.  Another approach would be to make the class&amp;#8217;s constructor private and require object construction to be done through static factory methods.  Let&amp;#8217;s go ahead and mark &lt;strong&gt;Team&lt;/strong&gt; as final.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_perform_defensive_copies&quot;&gt;Perform Defensive Copies&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Even after performing the previous steps &lt;strong&gt;Team&lt;/strong&gt; is still &lt;u&gt;not&lt;/u&gt; immutable.  How can that be?  A &lt;strong&gt;Team&lt;/strong&gt; instance is constructed with an immutable &lt;strong&gt;String&lt;/strong&gt; instance for the team name, but the player names associated with a &lt;strong&gt;Team&lt;/strong&gt; is stored in a mutable &lt;strong&gt;List&lt;/strong&gt; object reference.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here&amp;#8217;s how this can be exploited to bypass immutability:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Driver.java&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums java language-java&quot;&gt;&lt;code&gt;public class Driver {
    public static void main(final String[] args) {
    	final String teamName = &quot;My Team&quot;;
    	final List&amp;lt;String&amp;gt; players = new ArrayList&amp;lt;&amp;gt;();
    	players.add(&quot;Foo&quot;);

        final Team team = new Team(teamName, players);
        players.add(&quot;Bar&quot;);

        System.out.println(team.getPlayerNames()); &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Outputs both players &quot;Foo&quot; and &quot;Bar&quot;&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The problem here is that the &lt;code&gt;players&lt;/code&gt; object reference is created and maintained by the &lt;strong&gt;Driver&lt;/strong&gt; class and the reference is passed by value to the &lt;strong&gt;Team&lt;/strong&gt; instance.  After &lt;strong&gt;Team&lt;/strong&gt; creation, the &lt;code&gt;players&lt;/code&gt; list (which is still an object reference stored within the &lt;strong&gt;Team&lt;/strong&gt; instance) is modified and the call to &lt;code&gt;team.getPlayerNames()&lt;/code&gt; will return the contents of the &lt;code&gt;players&lt;/code&gt; list.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This can be fixed by making a defensive copy of the provided object reference in the &lt;strong&gt;Team&lt;/strong&gt; constructor so that the &lt;strong&gt;Team&lt;/strong&gt; object maintains a copy of the original list of player names.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Team.java&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums java language-java&quot;&gt;&lt;code&gt;public Team(final String name, final List&amp;lt;String&amp;gt; players) {
    teamName = name;
    playerNames = new ArrayList&amp;lt;&amp;gt;(players); &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Make a defensive copy of the provided container&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Alright, we&amp;#8217;ve made the defensive copy upon instantiation so &lt;strong&gt;Team&lt;/strong&gt; must be immutable now, right?  Not so fast!  The &lt;code&gt;getPlayerNames()&lt;/code&gt; method from &lt;strong&gt;Team&lt;/strong&gt; is susceptible to modification since it currently returns the object reference to the player name list.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Driver.java&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums java language-java&quot;&gt;&lt;code&gt;public class Driver {
    public static void main(final String[] args) {
        final String teamName = &quot;My Team&quot;;
        final List&amp;lt;String&amp;gt; players = new ArrayList&amp;lt;&amp;gt;();
        players.add(&quot;Foo&quot;);

        final Team team = new Team(teamName, players);
        final List&amp;lt;String&amp;gt; teamPlayers = team.getPlayerNames();

        System.out.println(teamPlayers); &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
        teamPlayers.add(&quot;Bar&quot;);
        System.out.println(team.getPlayerNames()); &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Outputs &quot;Foo&quot;, as expected&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Outputs &quot;Foo&quot; and &quot;Bar&quot;, uh-oh!&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;As you can see, &lt;strong&gt;Team&lt;/strong&gt; is still not immutable because the reference to the players list is returned via &lt;code&gt;getPlayerNames()&lt;/code&gt;.  This reference can be held by the &lt;strong&gt;Driver&lt;/strong&gt; class and mutated which modifies the internal state of a &lt;strong&gt;Team&lt;/strong&gt; instance.  Once again, the fix is to create a defensive copy.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_our_mighty_immutable_object&quot;&gt;Our Mighty Immutable Object&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Here is the &lt;strong&gt;Team&lt;/strong&gt; class fully transformed to support immutable object creation:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;Team.java&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums java language-java&quot;&gt;&lt;code&gt;package immutable;

import java.util.ArrayList;
import java.util.List;
import net.jcip.annotations.Immutable;
import net.jcip.annotations.ThreadSafe;

@Immutable  &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
@ThreadSafe
public final class Team {
    private final String teamName;
    private final List&amp;lt;String&amp;gt; playerNames;

    public Team(final String name, final List&amp;lt;String&amp;gt; players) {
        teamName = name;
        playerNames = new ArrayList&amp;lt;&amp;gt;(players);
    }

    public String getTeamName() {
        return teamName;
    }

    public List&amp;lt;String&amp;gt; getPlayerNames() {
        return new ArrayList&amp;lt;&amp;gt;(playerNames);
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;&lt;a href=&quot;http://jcip.net.s3-website-us-east-1.amazonaws.com/&quot;&gt;Java Concurrency In Practice&lt;/a&gt; annotations used to convey intent&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_final_thoughts&quot;&gt;Final Thoughts&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Understanding the usefulness of immutable objects and how to create one is important to carry along with you on your knowledge tool belt.  However, the most obvious downside to using immutable objects is that in order to change its state a brand new instance must be constructed.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Additionally, caution must be used if the immutable object requires making defensive copies of large, mutable objects.  More than likely this won&amp;#8217;t be a problem unless you&amp;#8217;re making a large number of copies in a tight loop since that could be very slow and chew up your heap space.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Although it may be wise to prefer an immutable object, you must choose what best fits your application.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Include Jenkins Build Info With a Grails WAR File</title>
      <link>http://akeffalas.github.io/blog/2014/04/jenkins-build-info-grails-war.html</link>
      <pubDate>Fri, 11 Apr 2014 00:00:00 -0400</pubDate>
      <guid isPermaLink="false">/2014/04/jenkins-build-info-grails-war.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Are you looking for a way to associate your continuous integration server&amp;#8217;s build information with your web application?  I&amp;#8217;ve already &lt;a href=&quot;http://akeffalas.github.io/blog/2014/04/jenkins-build-info-maven-artifacts.html&quot;&gt;discussed&lt;/a&gt; how to easily inject the properties from a Jenkins build job into your Maven artifacts.  Let&amp;#8217;s see how a similar approach can be used for a packaged Grails WAR file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;I&amp;#8217;ll assume that you have access to the following Jenkins job&amp;#8217;s &lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Building+a+software+project#Buildingasoftwareproject-JenkinsSetEnvironmentVariables&quot;&gt;environment variables&lt;/a&gt;:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;BUILD_NUMBER&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GIT_COMMIT&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;!--continue--&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Using this build information, you&amp;#8217;ll be able to add the following details to the &lt;code&gt;MANIFEST.MF&lt;/code&gt; file of a Grails web archive file:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Build time&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Build number&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Source code revision (SVN revision number or Git commit hash)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_grails_event_configuration&quot;&gt;Grails Event Configuration&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;The simplest way to add entries and attributes to the archive&amp;#8217;s manifest file is to inject build properties during the war creation phase.  Grails exposes this capability via the &lt;strong&gt;eventCreateWarStart&lt;/strong&gt; event.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Create a &lt;code&gt;_Events.groovy&lt;/code&gt; file inside of your Grails application&amp;#8217;s &lt;code&gt;scripts&lt;/code&gt; directory.  This script file will run during a &lt;code&gt;grails war&lt;/code&gt; (or &lt;code&gt;mvn package&lt;/code&gt; if using the &lt;a href=&quot;https://github.com/grails/grails-maven&quot;&gt;Grails Maven plugin&lt;/a&gt;) command-line invocation.  The war creation event notification will fire and the closure defined by &lt;code&gt;eventCreateWarStart&lt;/code&gt; will execute.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;_Events.groovy&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums groovy language-groovy&quot;&gt;&lt;code&gt;eventCreateWarStart = { warName, stagingDir -&amp;gt;
    def unknownValue = &apos;UNKNOWN&apos;

    def buildNumberEnvironment = &apos;BUILD_NUMBER&apos;
    def scmRevisionEnvironment = &apos;GIT_COMMIT&apos;

    def buildNumberProperty = &apos;build.number&apos;
    def scmRevisionProperty = &apos;build.revision&apos;

    def buildNumber = System.getenv(buildNumberEnvironment)     &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;

    if( !buildNumber ) {        &lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;(2)&lt;/b&gt;
        buildNumber = System.getProperty(buildNumberProperty, unknownValue)
    }


    def scmRevision = System.getenv(scmRevisionEnvironment)

    if( !scmRevision ) {
        scmRevision = System.getProperty(scmRevisionProperty, unknownValue)
    }


    ant.propertyfile(file:&quot;${stagingDir}/WEB-INF/classes/application.properties&quot;) {
        entry(key:&apos;app.version.buildNumber&apos;, value: buildNumber)        &lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;(3)&lt;/b&gt;
    }

    ant.manifest(file: &quot;${stagingDir}/META-INF/MANIFEST.MF&quot;, mode: &quot;update&quot;) {
        attribute(name: &quot;Build-Time&quot;, value: new Date())        &lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;(4)&lt;/b&gt;

        section(name: &quot;Grails Application&quot;) {       &lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;(5)&lt;/b&gt;
            attribute(name: &quot;Implementation-Build-Number&quot;, value: buildNumber)
            attribute(name: &quot;Implementation-SCM-Revision&quot;, value: scmRevision)
        }
    }
}&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Try to get the build number from an environment variable (Jenkins job)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;2&quot;&gt;&lt;/i&gt;&lt;b&gt;2&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Otherwise, check for a system property (this allows for overriding via the command-line)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;3&quot;&gt;&lt;/i&gt;&lt;b&gt;3&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Add the build number to the application.properties file for usage in the application&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;4&quot;&gt;&lt;/i&gt;&lt;b&gt;4&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Add the build time to the manifest&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;5&quot;&gt;&lt;/i&gt;&lt;b&gt;5&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Add a manifest entry with the build info attributes&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_results&quot;&gt;Results&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Upon build completion, the WAR file that has been created will now have a &lt;code&gt;MANIFEST.MF&lt;/code&gt; file that contains the following entries:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;MANIFEST.MF&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;Build Details

Build-Time: 2014-04-11 14:22:13

Grails Application

Implementation-Build-Number: 742
Implementation-SCM-Revision: d0c60c86219ebe6f700b3fc161606325325cc567&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Additionally, the build number will also be added to the application&amp;#8217;s properties file which allows for easy injection into a Grails GSP file.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;application.properties&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;app.version.buildNumber=742&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;This information will help you determine which version of the web application is running which can be quite handy during debugging or for production deployment.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>
    <item>
      <title>Associate Jenkins Build Info with Maven Artifacts</title>
      <link>http://akeffalas.github.io/blog/2014/04/jenkins-build-info-maven-artifacts.html</link>
      <pubDate>Sun, 6 Apr 2014 00:00:00 -0400</pubDate>
      <guid isPermaLink="false">/2014/04/jenkins-build-info-maven-artifacts.html</guid>
      	<description>
	&lt;div id=&quot;preamble&quot;&gt;
&lt;div class=&quot;sectionbody&quot;&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;How many times have you tried to debug a problem with one of your components in production without knowing which revision of the codebase has been deployed?  Many times the Maven artifact version number isn&amp;#8217;t sufficient.  Sure, you know the release version of a certain JAR file (1.0.1000 for example), but how do you know if this contains a specific source code commit?  Not to mention debugging during development when your artifact versions are typically *-SNAPSHOT; that&amp;#8217;s not very useful at all.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;We&amp;#8217;re going to configure a poor man&amp;#8217;s configuration management scheme to incorporate more information with your build artifacts.  Let&amp;#8217;s assume that you have a continuous integration server setup to build your project&amp;#8217;s artifacts.  Here are some pieces of information that would be useful to bundle with a JAR, WAR, etc.:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Build time&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Build number&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Source code revision  (SVN revision number or Git commit hash)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;!--continue--&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;For this article, it is assumed that your CI server is running &lt;a href=&quot;http://jenkins-ci.org&quot;&gt;Jenkins&lt;/a&gt; and that you are using &lt;a href=&quot;http://git-scm.com/&quot;&gt;git&lt;/a&gt; for source code management.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;So, how can you get this build information from Jenkins? Thankfully, there are a number of &lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Building+a+software+project#Buildingasoftwareproject-JenkinsSetEnvironmentVariables&quot;&gt;environment variables&lt;/a&gt; that Jenkins exposes by default.  The &lt;a href=&quot;https://wiki.jenkins-ci.org/display/JENKINS/Git+Plugin&quot;&gt;Jenkins git plugin&lt;/a&gt; will provide the git-specific variables.  Here are the variables that we&amp;#8217;ll be using:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;ulist&quot;&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;BUILD_NUMBER&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;GIT_COMMIT&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_maven_project_configuration&quot;&gt;Maven Project Configuration&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now that we know how to get the data from Jenkins, we need a way to inject it into our build.  This can be achieved by writing the information to an artifact&amp;#8217;s MANIFEST.MF file.  We can use Maven&amp;#8217;s JAR plugin to perform &lt;a href=&quot;http://maven.apache.org/plugins/maven-jar-plugin/examples/manifest-customization.html&quot;&gt;manifest customization&lt;/a&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;In the Maven project&amp;#8217;s POM file we&amp;#8217;ll add a few properties that can be used to inject the build details:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;pom.xml&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums xml language-xml&quot;&gt;&lt;code&gt;&amp;lt;properties&amp;gt;
    &amp;lt;build.manifest.section&amp;gt;Build Details&amp;lt;/build.manifest.section&amp;gt;
    &amp;lt;build.unknown&amp;gt;UNKNOWN&amp;lt;/build.unknown&amp;gt;
    &amp;lt;build.number&amp;gt;${build.unknown}&amp;lt;/build.number&amp;gt;
    &amp;lt;build.revision&amp;gt;${build.unknown}&amp;lt;/build.revision&amp;gt;
&amp;lt;/properties&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_manifest_customization&quot;&gt;Manifest Customization&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Let&amp;#8217;s go ahead and customize the manifest for our Maven project&amp;#8217;s JAR artifact:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;pom.xml&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint linenums xml language-xml&quot;&gt;&lt;code&gt;&amp;lt;plugins&amp;gt;
    &amp;lt;plugin&amp;gt;
        &amp;lt;groupId&amp;gt;org.apache.maven.plugins&amp;lt;/groupId&amp;gt;
        &amp;lt;artifactId&amp;gt;maven-assembly-plugin&amp;lt;/artifactId&amp;gt;
        &amp;lt;version&amp;gt;2.4&amp;lt;/version&amp;gt;
        &amp;lt;configuration&amp;gt;
            &amp;lt;archive&amp;gt;
                &amp;lt;manifest&amp;gt;
                    &amp;lt;addClasspath&amp;gt;true&amp;lt;/addClasspath&amp;gt;
                &amp;lt;/manifest&amp;gt;
                &amp;lt;manifestEntries&amp;gt;
                    &amp;lt;Build-Time&amp;gt;${maven.build.timestamp}&amp;lt;/Build-Time&amp;gt;  &lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;(1)&lt;/b&gt;
                &amp;lt;/manifestEntries&amp;gt;
                &amp;lt;manifestSections&amp;gt;
                    &amp;lt;manifestSection&amp;gt;
                        &amp;lt;name&amp;gt;${build.manifest.section}&amp;lt;/name&amp;gt;
                        &amp;lt;manifestEntries&amp;gt;
                            &amp;lt;Implementation-Title&amp;gt;${project.name}&amp;lt;/Implementation-Title&amp;gt;
                            &amp;lt;Implementation-Version&amp;gt;${project.version}&amp;lt;/Implementation-Version&amp;gt;
                            &amp;lt;Implementation-Build-Number&amp;gt;${build.number}&amp;lt;/Implementation-Build-Number&amp;gt;
                            &amp;lt;Implementation-SCM-Revision&amp;gt;${build.revision}&amp;lt;/Implementation-SCM-Revision&amp;gt;
                        &amp;lt;/manifestEntries&amp;gt;
                    &amp;lt;/manifestSection&amp;gt;
                &amp;lt;/manifestSections&amp;gt;
            &amp;lt;/archive&amp;gt;
        &amp;lt;/configuration&amp;gt;
    &amp;lt;/plugin&amp;gt;
&amp;lt;/plugins&amp;gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;colist arabic&quot;&gt;
&lt;table&gt;
&lt;tr&gt;
&lt;td&gt;&lt;i class=&quot;conum&quot; data-value=&quot;1&quot;&gt;&lt;/i&gt;&lt;b&gt;1&lt;/b&gt;&lt;/td&gt;
&lt;td&gt;Maven&amp;#8217;s built-in build timestamp property&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;With this configuration, the MANIFEST.MF file will contain the classpath and other default manifest entries along with the added &lt;code&gt;Build-Time&lt;/code&gt; entry.  A new manifest section has been added to separate the Jenkins build details from other manifest entries.  This section will contain the Jenkins job&amp;#8217;s build number and the git commit hash.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;By default, the artifact&amp;#8217;s build number and source code revision will be set to &lt;strong&gt;UNKNOWN&lt;/strong&gt; unless their respective properties are assigned.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_jenkins_build_info_injection&quot;&gt;Jenkins Build Info Injection&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;To assign these properties, go into the Jenkins job&amp;#8217;s configuration and modify the Maven Build&amp;#8217;s &quot;Goals and options&quot; to: &lt;code&gt;clean install -Dbuild.number=${BUILD_NUMBER} -Dbuild.revision=${GIT_COMMIT}&lt;/code&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Save the job configuration and execute a new build.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;sect2&quot;&gt;
&lt;h3 id=&quot;_resulting_embedded_manifest&quot;&gt;Resulting Embedded Manifest&lt;/h3&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Upon build completion, the JAR file that has been created will now have a MANIFEST.MF file that contains the following entries:&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;listingblock&quot;&gt;
&lt;div class=&quot;title&quot;&gt;MANIFEST.MF&lt;/div&gt;
&lt;div class=&quot;content&quot;&gt;
&lt;pre class=&quot;prettyprint&quot;&gt;&lt;code&gt;Manifest-Version: 1.0
Built-By: jenkins
Build-Jdk: 1.7.0_49
Created-By: Apache Maven
Build-Time: 2014-04-05 18:53:13

Build Details

Implementation-Title: &amp;lt;project_name&amp;gt;
Implementation-Version: &amp;lt;project_version&amp;gt;
Implementation-Build-Number: 742
Implementation-SCM-Revision: d0c60c86219ebe6f700b3fc161606325325cc567&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;Now that this information is bundled with the JAR file you can easily determine if this artifact contains the code commit that you&amp;#8217;re looking for by consulting your git repository and/or the build log from your Jenkins job.&lt;/p&gt;
&lt;/div&gt;
&lt;div class=&quot;paragraph&quot;&gt;
&lt;p&gt;No more guessing about what is and is not in the component that you&amp;#8217;re debugging.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
	</description>
    </item>

  </channel> 
</rss>
